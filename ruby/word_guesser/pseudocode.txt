Define the game code:
Create a Game class, and initialize it with:
  is_over to guesses available is >= 0
  A secret word set by Player 1
  Player 2's individual guess
  An empty array to populate with Player 2's guesses

  define method to check Player 2's guess
  define method to display the length of the secret word in dashes or underscores

Define the UI:
  Print game introduction
  Prompt Player 1 for a secret word, and use it to initialize a new game
  display the secret word as dashed, and populate it with correct guesses

  In a loop While not is_over
    Prompt Player 2 to enter a guess and the number of guesses left
    Store the guess and update the display dashes
    decrement the guesses count

    If the guesses array doesn't have the guessed letter or the letter is in the secret word
      push the guess into the guesses array
      is_over is true, and Player 2 wins.

    If the guess matches letters of the secret word
      Update the display array at the indexs where that letter matches
    if a unique sorted guesses array == a unique sorted secret word array
        The game is_over
        Player 2 wins!
    If number of guesses == 0
      Player 2 loses. Break out of the loop
  end the loop

Bonus:
1. Whole word entry to win
2. Phrase secret words (handle " ") #done!

Validation:
1. Case where unique sorted guesses and unique sorted secret word aren't the same word
